{"name":"Node-mysql-promise","tagline":"node mysql model based on promise","body":"# node-mysql-promise\r\n\r\n\r\n## Install\r\n\t$ npm install node-mysql-promise\r\n\t\r\n## Introduction\r\nnode mysql操作封装类，基于promise，借鉴75team开源项目thinkjs中model操作，数据库连接使用node-mysql的连接池。\r\n### 使用示例\r\n\r\n```js\r\nvar Mysql = require('node-mysql-promise');\r\nvar mysql = Mysql.createConnection({\r\n\thost        : 'localhost',\r\n\tuser        : 'username',\r\n\tpassword    : 'password'\r\n});\r\n//SELECT * FROM table;\r\nmysql.table('table').select().then(function (data) {\r\n\tconsole.log(data);\r\n}).catch(function (e) {\r\n\tconsole.log(e);\r\n});\r\n```\r\n\t\r\n\r\n##API\r\n### 配置\r\n* `host`: 连接的host（默认: localhost）\r\n* `port`: 连接端口\r\n* `user`: 用户名\r\n* `password`: 密码\r\n* `database`: 数据库名\r\n* `charset`: 编码（默认: UTF8_GENERAL_CI）\r\n* `timezone`: 时区（默认: 'local'）\r\n* `connectTimeout`: 连接超时时间（默认: 10000）\r\n* `connectionLimit`: 最大连接数（默认: 10）\r\n* `logSql`: 控制台输出sql（默认: false）\r\n\r\n### 方法\r\n\r\n##### table(tableName)\r\n设置要查询的表（必需）\r\n\r\n* `tableName` String 要查询的表\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table`\r\nmysql.table('table').select()\r\n```\r\n\r\n\r\n#### field(field, reverse)\r\n设置要查询的字段\r\n\r\n* `field` String|Array 要查询的字段，可以是字符串，也可以是数组\r\n* `reverse` Boolean 是否反选字段\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table`\r\nmysql.table('table').field().select();\r\n//SELECT `id`, `title` FROM `table`\r\nmysql.table('table').field('id, title').select();\r\n//SELECT `id`, `title` FROM `table`\r\nmysql.table(['id', 'title']).select();\r\n//SELECT `author`, `date` FROM `table`\r\nmysql.table('table').field(['id', 'title'], true).select();\r\n```\r\n\t\t\r\n\t\t\r\n#### limit(offset, length)\r\n\r\n设置查询的数量\r\n* `offset` Number 起始位置\r\n* `length` Number 查询的数目\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` LIMIT 10\r\nmysql.table('table').limit(10).select();\r\n//SELECT * FROM `table` LIMIT 10, 20\r\nmysql.table('table').limit(10, 20).select();\r\n```\r\n\t\t\r\n#### page(page, listRows)\r\n设置当前查询的页数，页数从1开始\r\n\r\n* `page` Number 当前的页数\r\n* `listRows` Number 一页记录条数，默认20条\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table`\r\nmysql.table('table').page().select();\r\n//SELECT * FROM `table` LIMIT 0,20\r\nmysql.table('table').page(1).select();\r\n//SELECT * FROM `table` LIMIT 10, 20\r\nmysql.table('table').page(2, 10).select();\r\n```\r\n\t\t\r\n#### union(union, all)\r\n联合查询\r\n\r\n* `union` String 联合查询的字符串\r\n* `all` 是否为UNION ALL模式\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` UNION (SELECT * FROM `table2`)\r\nmysql.table('table').union('SELECT * FROM `table2`').select();\r\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`)\r\nmysql.table('table').union('SELECT * FROM `table2`', true).select();\r\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`)\r\nmysql.table('table').union({table: 'table2'}, true);\r\n//SELECT * FROM `table` UNION ALL (SELECT * FROM `table2`) UNION (SELECT * FROM `table3`)\r\nmysql.table('table').UNION({table: 'table2`}, true).union({table: 'table3'});\r\n```\r\n\t\t\r\n\r\n#### join(join)\r\n组合查询\r\n\r\n* `join` String|Array|Object\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id\r\nmysql.table('table').join('table2 on table.id = table2.id').select();\r\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id RIGHT JOIN `table3` ON table.sid = table3.sid\r\nmysql.table('table').join('table2 ON table.id = table2.id', 'RIGHT JOIN table3 ON table.sid = table3.sid').select();\r\n//SELECT * FROM `table` INNER JOIN `table2` on table.id = table2.id\r\nmysql.table('table').join({\r\n\ttable: 'table2',\r\n\tjoin: 'inner',//left, right, inner三种方式\r\n\tas: 'c' //表别名\r\n\ton: ['id', 'id'] //ON 条件\r\n}).select();\r\n//SELECT * FROM `table` AS a LEFT JOIN `table2` AS b ON a.id = b.id LEFT JOIN `table3` AS c ON a.sid = c.sid\r\nmysql.table('table').alias('a').join({\r\n\ttable: 'table2',\r\n\tjoin: 'left',\r\n\tas: 'b'\r\n\ton: ['id', 'id']\r\n}).join({\r\n\ttable: 'table3',\r\n\tjoin: 'left',\r\n\tas: 'c',\r\n\ton: ['sid', 'sid']\r\n}).select();\t\t\r\n//SELECT * FROM `table` AS a LEFT JOIN `table2` AS b ON a.id = b.id LEFT JOIN `table3` AS c ON a.sid = c.sid\r\nmysql.table('table').join({\r\n\ttable2: {\r\n\t\tjoin: 'left',\r\n\t\tas: 'b',\r\n\t\ton: ['id', 'id']\r\n\t},\r\n\ttable3: {\r\n\t\tjoin: 'left',\r\n\t\tas: 'c',\r\n\t\ton: ['sid', 'sid']\r\n\t}\r\n}).select();\t\t\r\n//SELECT * FROM `table` LEFT JOIN `table2` ON table.id = table2.id LEFT JOIN `table3` ON (table.sid = table3.sid AND table.name = table3.title);\r\nmysql.table('table').join({\r\n\ttable2: {\r\n\t\ton: ['id', 'id']\r\n\t},\r\n\ttable3: {\r\n\t\ton: {\r\n\t\t\tid: 'id',\r\n\t\t\ttitle: 'name'\r\n\t\t}\r\n\t}\r\n}).select();\r\n```\r\n\t\t\r\n#### order(order)\r\n设置排序方式\r\n\r\n* `order`  String|Array|Obeject 排序方式\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` ORDER BY `id`\r\nmysql.table('table').order('id').select();\t\t\r\n//SELECT * FROM `table` ORDER BY `id` DESC\r\nmysql.table('table').order('id DESC').select();\r\n//SELECT * FROM `table` ORDER BY `id` DESC, `title` ASC\r\nmysql.table('table').order('id DESC, title ASC').select();\r\n//SELECT * FROM `table` ORDER BY `id` DESC, `title` ASC\r\nmysql.table('table').order(['id DESC', 'title ASC']).select();\r\n//SELECT * FROM `table` ORDER BY `id` DESC `title` ASC\r\nmysql.table('table').order({id: 'DESC', title: 'ASC'}).select();\r\n```\r\n\t\t\r\n#### alias(alias)\r\n设置表别名\r\n\r\n* `alias` String 表别名\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` AS t\r\nmysql.table('table').alias('t').select();\r\n```\r\n\t\t\r\n#### having(str)\r\nhaving查询\r\n\r\n* `str` String having查询的字符串\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` HAVING `id` > 1 AND `id` < 100\r\nmysql.table('table').having('id > 1 AND id < 100').select();\r\n```\r\n\t\r\n#### group(field)\r\n分组查询\r\n\r\n* `field` String 设定分组查询的字段\r\n* `return` this\r\n\r\n```js\r\n//SELECT * FROM `table` GROUP BY `date`\r\nmysql.table('table').group('date').select();\r\n```\r\n\t\r\n#### distinct(field)\r\n去重查询\r\n\r\n* `field` String 去重的字段\r\n* `return` this\r\n\r\n```js\r\n//SELECT DISTINCT `title` FROM `table`\r\nmysql.table('table').distinct('title').select();\r\n```\r\n\t\r\n#### where(where)\r\n设置where条件\r\n\r\n* `where` Sting|Object 查询条件\r\n* `return` this\r\n\r\n##### 普通条件\r\n\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE `id` = 100;\r\nmysql.table('table').where('id = 100').select();\r\n//SELECT * FROM `table` WHERE `id` = 100;\r\nmysql.table('table').where({id: 100}).select();\r\n//SELECT * FROM `table` WHERE `id` = 100 OR `id` < 2\r\nmysql.table('table').where('id = 100 OR id < 2').select();\r\n//SELECT * FROM `table` WHERE `id` != 100\r\nmysql.table('table').where({id: ['!=', 100]})\r\n```\r\n\r\n##### EXP条件\r\n默认会对字段和值进行转义，如果不希望被转义，可是使用EXP的方式\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE `name` = 'name'\r\nmysql.table('table').where({name: ['EXP', \"='name'\"]}).select();\r\n//UPDATE `table` SET `num' = `num`+1\r\nmysql.table('table').update({num: ['EXP', 'num+1']});\r\n```\r\n\t\t\r\n##### LIKE条件\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE (`title` NOT LIKE 'title')\r\nmysql.table('table').where({title: ['NOT LIKE', 'title']}).select();\r\n//SELECT * FROM `table` WHERE (`title` LIKE '%title%')\r\nmysql.table('table').where({title: ['LIKE', '%title%']}).select();\r\n//LIKE多个值\r\n//SELECT * FROM `table` WHERE (`title` LIKE 'title' OR `title` LIKE 'name')\r\nmysql.table('table').where({title: ['LIKE', ['title', 'name']]}).select();\r\n//多个字段LIKE同一个值，OR的关系\r\n//SELECT * FROM `table` WHERE ((`title` LIKE '%title%') OR (`content` LIKE '%title%'))\r\nmysql.table('table').where({'title|content': ['LIKE', '%title%']}).select();\r\n//多个字段LIKE同一个值，AND的关系\r\n//SELECT * FROM `table` WHERE ((`title` LIKE '%title%') AND (`content` LIKE '%title%'))\r\nmysql.table('table').where({'title&content': ['LIKE', '%title%']}).select();\r\n```\r\n\t\t\r\n##### IN条件\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE (`id` IN (1,2,3))\r\nmysql.table('table').where({id: ['IN', '1, 2, 3']}).select();\r\n//SELECT * FROM `table` WHERE (`id` IN (1, 2, 3))\r\nmysql.table('table').where({id: ['IN', [1, 2, 3]]}).select();\r\n//SELECT * FROM `table` WHERE (`id` NOT IN (1, 2, 3))\r\nmysql.table('table').where({id: ['NOT IN', [1, 2, 3]]}).select();\r\n```\r\n\t\t\r\n\t\t\r\n##### 多字段查询\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE (`id` = 10) AND (`title` = 'title')\r\nmysql.table('table').where({id: 10, title: 'title'}).select();\r\n//OR\r\n//SELECT * FROM `table` WHERE (`id` = 10) OR (`title` = 'title')\r\nmysql.table('table').where({id: 10, title: 'title', _logic: 'OR'}).select();\r\n//XOR\r\n//SELECT * FROM `table` WHERE (`id` = 10) XOR (`title` = 'title')\r\nmysql.table('table').where({id: 10, title: 'title', _logic: 'XOR'}).select();\r\n```\r\n\t\r\n##### BETWEEN\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE (`id` BETWEEN 1 AND 2)\r\nmysql.table('table').where({id: ['BETWEEN', 1, 2]}).select();\r\n//SELECT * FROM `table` WHERE (`id` BETWEEN 1 AND 2)\r\nmysql.table('table').where({id: ['BETWEEN', '1,2']}).select();\r\n```\r\n\t\t\r\n##### 复合查询\r\n\r\n```js\r\n//SELECT * FROM `table` WHERE `id` > 10 AND `id` < 20\r\nmysql.table('table').where({id: {\r\n\t'>': 10,\r\n\t'<': 20\r\n}}).select();\r\n//SELECT * FROM `table` WHERE `id` < 10 OR `id` > 20\r\nmysql.table('table').where({id: {\r\n\t'<': 10,\r\n\t'>': 20,\r\n\t_logic: 'OR'\r\n}}).select();\r\n//SELECT * FROM `table` WHERE (`id` > 10 AND `id` < 20) OR (`title` LIKE '%title%')\r\nmysql.table('table').where({id: {\r\n\t'>': 10,\r\n\t'<': 20\r\n}, title: ['LIKE', '%title%']}).select();\r\n//SELECT * FROM `table` WHERE (`title` = 'title') AND ((`id` IN (1, 2, 3)) OR (`content` = 'content'))\r\nmysql.table('table').where({\r\n\ttitle: 'title',\r\n\t_complex: {\r\n\t\tid: ['IN', [1, 2, 3]],\r\n\t\tcontent: 'content',\r\n\t\t_logic: 'OR'\r\n\t}\r\n}).select();\r\n```\r\n\t\t\r\n\t\t\r\n#### count(field)\r\n查询符合条件的数目\r\n\r\n* `field` String count的字段\r\n* `return` promise\r\n\r\n```js\r\n//SELECT COUNT(`id`) FROM `table` LIMIT 1\r\nmysql.table('table').count('id').then(function (count) {\r\n\t//count为符合条件的数目\t\t\r\n})\r\n```\r\n\t\t\r\n#### sum(field)\r\n求和\r\n\r\n* `field` String 要求和的字段\r\n* `return` promise\r\n\r\n```js\r\n//SELECT SUM(`num`) FROM `table` LIMIT 1\r\nmysql.table('table').sum('num').then(function (sum) {\r\n\t//sum为求和的值\t\r\n});\r\n```\r\n\t\t\r\n#### max(field)\r\n求字段的最大值\r\n\r\n* `field` String 要求最大值的字段\r\n* `return` promise\r\n\r\n```js\r\n//SELECT MAX(`num`) FROM `table` LIMIT 1\r\nmysql.table('table').max('num').then(function (max) {\t//max为num的最大值\r\n});\r\n```\r\n\t\t\r\n#### min(field)\r\n求字段的最小值\r\n\r\n* `field` String 要求最小值的字段\r\n* `return` promise\r\n\r\n```js\r\n//SELECT MIN(`num`) FROM `table` LIMIT 1\r\nmysql.table('table').min('num').then(function (min) {\r\n\t//min为num的最小值\t\r\n})\r\n```\r\n\r\n\t\t\r\n#### avg(field)\r\n求字段的平均值\r\n\r\n* `field` Sting 要求平均值的字段\r\n* `return` promise\r\n\r\n```js\r\n//SELECT AVG(`num`) FROM `table` LIMIT 1;\r\nmysql.table('table').avg('num').then(function (avg) {\r\n\t//avg为num的平均值\t\r\n})\r\n```\r\n\t\t\r\n#### add(data)\r\n插入数据\r\n\r\n* `data` Object 要插入的数据\r\n* `return` promise\r\n\r\n```js\r\nvar data  = {\r\n\ttitle: 'title',\r\n\tcontent: 'content'\r\n};\r\nmysql.table('table').add(data).then(function (insertId) {\r\n\t//如果插入成功，返回插入的id\r\n\t}).catch(function (err) {\r\n\t\t//插入失败，err为具体的错误信息\r\n\t})\r\n```\r\n\t\t\r\n#### thenAdd(data, where, returnDetail)\r\n当数据表中不存在where条件对应的数据时才进行插入\r\n\r\n* `data` Object 要插入的数据\r\n* `where` String|Array|Object 检测的条件\r\n* `returnDetail` Boolean 是否返回详细的信息\r\n\r\n```js\r\n//假设字段title为UNIQUE\r\nvar data = {\r\n\ttitle: 'title',\r\n\tcontent: 'content'\r\n};\r\nvar where = {\r\n\ttitle: 'title'\r\n}\r\nmysql.table('table').thenAdd(data, where).then(function (id) {\r\n\t//返回已经存在或者刚插入的id\r\n})\t\t\r\n//返回详细信息\r\nmysql.table('table').thenAdd(data, where, true).then(function (data) {\r\n\t/*\r\n\tdata数据结构为\r\n\t{\r\n\t\ttype: 'exist' || 'add',  //exist表示已存在，add新增\r\n\t\tid: 1\r\n\t}\r\n\t*/\t\r\n})\r\n```\r\n\r\n#### addAll(data)\r\n一次添加多条数据\r\n\r\n* `data` Array\r\n* `return` promise\r\n\r\n```js\r\nvar data = [{title: 'xxx'}, {title: 'yyy'}];\r\nmysql.table('table').addAll(data).then(function (insertId) {\r\n\t//插入成功\r\n}).catch(function (err) {\r\n\t//插入失败\r\n})\r\n```\r\n\t\t\r\n\t\t\r\n#### delete()\r\n删除数据\r\n\r\n* `return` promise\r\n\r\n```js\r\n//删除所有数据\r\nmysql.table('table').delete().then(function (affectRows) {\r\n\t//返回影响行数\r\n})\t\t\r\n//删除符合条件的数据\r\nmysql.table('table').where(where).delete().then(functino (affectRows) {\r\n\t//返回影响的行数\r\n})\r\n```\t\t\r\n\t\t\r\n#### update(data)\r\n更新数据，需要条件\r\n\r\n* `data` Object 要更新的数据\r\n* `return` promise\r\n\r\n```js\r\nmysql.table('table').where(where).update(data).then(function (affectRows) {\r\n\t//返回影响行数\r\n})\r\n```\r\n\t\t\r\n\r\n#### select()\r\n查询符合条件的数据\r\n\r\n* `return` promise\r\n\r\n```js\r\nmysql.table('table').where(where).select().then(function (data) {\r\n\t//返回结果 Array\r\n})\r\n```\r\n\r\n\t\t\r\n#### find()\r\n查找一条符合条件的数据\r\n\r\n* `return` promise\r\n\r\n```js\r\nmysql.table('table').where(where).find().then(function (data) {\r\n\t//返回结果 Object\r\n})\r\n```\r\n\t\t\r\n#### updateInc(field, step)\r\n字段值增加\r\n\r\n* `field` String 要增加的字段\r\n* `step` Number 增加的数值，默认为1\r\n* `return` promise\r\n\r\n```js\r\n//将id为1的num字段加10\r\nmysql.table('table').where({id: 1}).updateInc('num', 10).then(function () {\r\n})\r\n```\r\n\t\t\r\n#### updateDec(field, step)\r\n字段值减少\r\n\r\n* `field` String 要减少的字段\r\n* `step` Number 减少的数字，默认为1\r\n* `return` promise\r\n\r\n```js\r\n//将id为1的num字段值减10\r\nmysql.table('table').where({id: 1}).updateDec('num', 10).then(function () {\r\n})\r\n```\r\n\t\t\r\n#### getField(field, onlyOne)\r\n获取某个字段的值\r\n\r\n* `field` String 要获取的字段，可以是多个字段（用,隔开）\r\n* `onlyOne` Boolean|Array 是否只需要一个值，或者是需要几个值\r\n\r\n```js\r\n//取id>100的id集合\r\nmysql.table('table').where({id: ['>', 100]}).getField('id').then(function (data) {\r\n\t//data为Array，是符合结果的所有集合\r\n\t//data = [101, 102, 103, 104]\r\n})\t\t\r\n//只需要id>100的一个值\r\nmysql.table('table').where({id: ['>': 100]}).getField('id', true).then(function (data) {\r\n\t//data为数字，符合条件的第一个值\r\n\t//data = 101\r\n})\r\n//只需要id>100的3个值\r\nmysql.table('table').where({id: ['>' 100]}).getField('id', 3).then(function (data) {\r\n\t//data为Array\r\n\t//data = [101, 102, 103]\r\n})\r\n//需要id和title两个字段的值\r\nmysql.table('table').getField('id, title').then(function (data) {\r\n\t//data为对象\r\n\t/*\r\n\tdata = {\r\n\t\tid: [101, 102, 103, 104],\r\n\t\ttitle: ['aaaa', 'bbbb', 'cccc', 'dddd']\r\n\t}\r\n\t*/\r\n})\r\n```\r\n\t\t\r\n\t\t\r\n#### countSelect(options, flag)\r\n\r\n* `options` 查询参数\r\n* `flag` Boolean 当分页值不合法的时候，处理情况。true为修正到第一页，false为修正到最后一页，默认不进行修正\r\n* `return` promise\r\n\r\n```js\r\n//查询1-20条数据\r\nmysql.table('table').page(1, 20).countSelect().then(function (data) {\r\n\t//data数据格式\r\n\tdata = {\r\n\t\tcount: 123, //总条数\r\n\t\ttotal: 7    //总页数\r\n\t\tpage: 1     //当前页\r\n\t\tnum: 20     //每页显示数量\r\n\t\tdata： [{}, {}] //详细数据\r\n\t}\r\n});\r\n```\r\n\t\t\r\n\r\n#### query(sql, parse)\r\n自定义sql语句进行查询\r\n\r\n* `sql` String 要执行的sql语句\r\n* `parse` 格式参数的数据\r\n* `return` promise\r\n\r\n```js\r\nvar data = [\r\n\t'*',\r\n\t'table',\r\n\t'id > 100'\r\n]\t\r\nmysql.query('SELECT %s FROM %s WHERE %s', data).then(function (data) {\r\n})\r\n```\r\n\r\n#### execute(sql, parse)\r\n自定义sql语句执行，使用与query相同，返回数据不同，execute返回影响行数\r\n\r\n#### close()\r\n关闭连接池连接，非特殊情况，不建议使用\r\n\r\n\t\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\t\t\t\r\n\r\n\r\n\t\t\r\n\t\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\t\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}